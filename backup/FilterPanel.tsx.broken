// components/FilterPanel.tsx
import React, { useState } from 'react';
import { Brand, FilterOptions } from '../types';
import { getAllEras, getGroupedEras, sortBrandsByName } from '../utils/dataUtils';
import { ChevronDown, ChevronUp, Filter, X } from 'lucide-react';

interface FilterPanelProps {
  brands: Brand[];
  filters: FilterOptions;
  onFilterChange: (filters: FilterOptions) => void;
}

export default function FilterPanel({ brands, filters, onFilterChange }: FilterPanelProps) {
  const [isExpanded, setIsExpanded] = useState(false);
  
  // 利用可能な年代とブランドを取得
  const allEras = getAllEras(brands);
  const { regularEras, detailedEras, otherEras } = getGroupedEras(brands);
  const sortedBrands = sortBrandsByName(brands);
  
  // その他の年代と詳細年代を表示するかどうかの状態
  const [showOtherEras, setShowOtherEras] = useState(false);
  const [showDetailedEras, setShowDetailedEras] = useState(false);
  
  // スタイル要素の重複を排除したリスト
  const allStyles = Array.from(new Set(
    brands.flatMap(brand => brand.coreStyle)
  )).sort();
  
  // フィルター変更ハンドラー
  const handleBrandChange = (brandId: number) => {
    const updatedBrands = filters.brands.includes(brandId)
      ? filters.brands.filter(id => id !== brandId)
      : [...filters.brands, brandId];
    
    onFilterChange({
      ...filters,
      brands: updatedBrands
    });
  };
  
  const handleEraChange = (era: string) => {
    const updatedEras = filters.eras.includes(era)
      ? filters.eras.filter(e => e !== era)
      : [...filters.eras, era];
    
    onFilterChange({
      ...filters,
      eras: updatedEras
    });
  };
  
  const handleStyleChange = (style: string) => {
    const updatedStyles = filters.styles.includes(style)
      ? filters.styles.filter(s => s !== style)
      : [...filters.styles, style];
    
    onFilterChange({
      ...filters,
      styles: updatedStyles
    });
  };
  
  const handleClearAll = () => {
    onFilterChange({
      brands: [],
      eras: [],
      styles: [],
      materials: [],
      silhouettes: []
    });
  };
  
  // 選択済みフィルターの合計数を計算
  const activeFilterCount = 
    filters.brands.length + 
    filters.eras.length + 
    filters.styles.length +
    filters.materials.length +
    filters.silhouettes.length;
  
  return (
    <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-4 mb-6">
      <div className="flex justify-between items-center mb-2">
        <div className="flex items-center gap-2">
          <Filter className="w-5 h-5 text-gray-600 dark:text-gray-300" />
          <h3 className="font-medium text-gray-800 dark:text-white">フィルター</h3>
          {activeFilterCount > 0 && (
          {activeFilterCount > 0 && (
            <span className="bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-100 text-xs font-semibold px-2 py-1 rounded-full">
              {activeFilterCount}
            </span>
          )}
        </div>
        
        <div className="flex items-center gap-2">
          {activeFilterCount > 0 && (
            <button 
              onClick={handleClearAll}
              className="text-xs text-gray-500 dark:text-gray-400 hover:text-red-500 dark:hover:text-red-400 flex items-center gap-1"
            >
              <X className="w-3 h-3" />
              すべてクリア
            </button>
          )}
          <button 
            onClick={() => setIsExpanded(!isExpanded)}
            className="text-gray-400 hover:text-gray-600 dark:text-gray-500 dark:hover:text-gray-300"
          >
            {isExpanded ? (
              <ChevronUp className="w-5 h-5" />
            ) : (
              <ChevronDown className="w-5 h-5" />
            )}
          </button>
        </div>
      </div>
      
      {isExpanded && (
        <div className="mt-4 space-y-6">
          {/* ブランドフィルター */}
          <div>
            <h4 className="font-medium text-gray-700 dark:text-gray-200 mb-2">ブランド</h4>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-2">
              {sortedBrands.slice(0, 20).map(brand => (
                <div key={brand.id} className="flex items-center">
                  <input
                    type="checkbox"
                    id={`brand-${brand.id}`}
                    checked={filters.brands.includes(brand.id)}
                    onChange={() => handleBrandChange(brand.id)}
                    className="rounded border-gray-300 text-blue-600 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700"
                  />
                  <label 
                    htmlFor={`brand-${brand.id}`}
                    className="ml-2 text-sm text-gray-700 dark:text-gray-300"
                  >
                    {brand.name}
                  </label>
                </div>
            
            {/* 選択中の年代表示 */}
            {filters.eras.length > 0 && (
              <div className="mb-3 p-2 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-700">
                <div className="text-xs font-medium text-blue-800 dark:text-blue-200 mb-1">
                  選択中の年代 ({filters.eras.length}件):
                </div>
                <div className="flex flex-wrap gap-1">
                  {filters.eras.map(era => (
                    <span
                      key={era}
                      className="inline-flex items-center px-2 py-1 text-xs bg-blue-100 dark:bg-blue-800 text-blue-800 dark:text-blue-100 rounded-full"
                    >
                      {era}
                      <button
                        onClick={() => handleEraChange(era)}
                        className="ml-1 hover:text-blue-600 dark:hover:text-blue-300"
                        title="この年代を除外"
                      >
                        ×
                      </button>
                    </span>
                  ))}
                </div>
              </div>
            )}
            ))}                  
            </div>
            {sortedBrands.length > 20 && (
            <button className="text-xs text-blue-600 dark:text-blue-400 mt-2">
            もっと見る...
            </button>
            )}
          </div>
          
          {/* 年代フィルター */}
          <div>
            <div className="flex justify-between items-center mb-2">
              <h4 className="font-medium text-gray-700 dark:text-gray-200">年代</h4>
              <div className="flex gap-2">
                <button
                  onClick={() => {
                    // 2000sと詳細年代を一括選択
                    const newEras = ['2000s', ...detailedEras];
                    onFilterChange({
                      ...filters,
                      eras: [...new Set([...filters.eras, ...newEras])]
                    });
                  }}
                  className="text-xs px-2 py-1 bg-blue-500 hover:bg-blue-600 text-white rounded"
                >
                  2000s以降選択
                </button>
                <button
                  onClick={() => {
                    // すべての年代を選択
                    const allEras = [...regularEras, ...detailedEras, ...otherEras];
                    onFilterChange({
                      ...filters,
                      eras: allEras
                    });
                  }}
                  className="text-xs px-2 py-1 bg-green-500 hover:bg-green-600 text-white rounded"
                >
                  全選択
                </button>
                <button
                  onClick={() => {
                    onFilterChange({
                      ...filters,
                      eras: []
                    });
                  }}
                  className="text-xs px-2 py-1 bg-red-500 hover:bg-red-600 text-white rounded"
                >
                  クリア
                </button>
              </div>
            </div>
            
            {/* 通常の年代（1980-2009）- 10年単位 */}
            <div className="flex flex-wrap gap-2 mb-3">
              {regularEras.map(era => (
                <button
                  key={era}
                  onClick={() => handleEraChange(era)}
                  className={`px-3 py-1 text-sm rounded-full transition-colors
                    ${filters.eras.includes(era)
                      ? 'bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-100 border border-blue-200 dark:border-blue-700'
                      : 'bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200 border border-gray-200 dark:border-gray-600 hover:bg-gray-200 dark:hover:bg-gray-600'
                    }`}
                >
                  {era}
                </button>
              ))}
            </div>
            
            {/* 詳細年代のトグル */}
            {detailedEras.length > 0 && (
              <div className="mb-2">
                <button
                  onClick={() => setShowDetailedEras(!showDetailedEras)}
                  className="text-sm text-blue-600 dark:text-blue-400 flex items-center"
                >
                  {showDetailedEras ? '2010年以降の年単位を隠す' : '2010年以降の年単位を表示'}
                  {showDetailedEras ? <ChevronUp className="w-4 h-4 ml-1" /> : <ChevronDown className="w-4 h-4 ml-1" />}
                </button>
              </div>
            )}
            
            {/* 詳細年代（2010年以降年単位） */}
            {showDetailedEras && detailedEras.length > 0 && (
              <div className="flex flex-wrap gap-2 mb-3 bg-gray-50 dark:bg-gray-850 p-2 rounded-lg border border-gray-200 dark:border-gray-700">
                {detailedEras.map(era => (
                  <button
                    key={era}
                    onClick={() => handleEraChange(era)}
                    className={`px-3 py-1 text-sm rounded-full transition-colors
                      ${filters.eras.includes(era)
                        ? 'bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-100 border border-green-200 dark:border-green-700'
                        : 'bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200 border border-gray-200 dark:border-gray-600 hover:bg-gray-200 dark:hover:bg-gray-600'
                      }`}
                  >
                    {era}
                  </button>
                ))}
              </div>
            )}
            
            {/* その他の年代のトグル */}
            {otherEras.length > 0 && (
              <div className="mb-2">
                <button
                  onClick={() => setShowOtherEras(!showOtherEras)}
                  className="text-sm text-blue-600 dark:text-blue-400 flex items-center"
                >
                  {showOtherEras ? 'その他の年代を隠す' : 'その他の年代を表示'}
                  {showOtherEras ? <ChevronUp className="w-4 h-4 ml-1" /> : <ChevronDown className="w-4 h-4 ml-1" />}
                </button>
              </div>
            )}
            
            {/* その他の年代（1980以前） */}
            {showOtherEras && otherEras.length > 0 && (
              <div className="flex flex-wrap gap-2">
                {otherEras.map(era => (
                  <button
                    key={era}
                    onClick={() => handleEraChange(era)}
                    className={`px-3 py-1 text-sm rounded-full transition-colors
                      ${filters.eras.includes(era)
                        ? 'bg-orange-100 dark:bg-orange-900 text-orange-800 dark:text-orange-100 border border-orange-200 dark:border-orange-700'
                        : 'bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200 border border-gray-200 dark:border-gray-600 hover:bg-gray-200 dark:hover:bg-gray-600'
                      }`}
                  >
                    {era}
                  </button>
                ))}
              </div>
            )}
          </div>
          
          {/* スタイル要素フィルター */}
          <div>
            <h4 className="font-medium text-gray-700 dark:text-gray-200 mb-2">スタイル</h4>
            <div className="flex flex-wrap gap-2">
              {allStyles.slice(0, 15).map(style => (
                <button
                  key={style}
                  onClick={() => handleStyleChange(style)}
                  className={`px-3 py-1 text-sm rounded-full transition-colors
                    ${filters.styles.includes(style)
                      ? 'bg-purple-100 dark:bg-purple-900 text-purple-800 dark:text-purple-100 border border-purple-200 dark:border-purple-700'
                      : 'bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200 border border-gray-200 dark:border-gray-600 hover:bg-gray-200 dark:hover:bg-gray-600'
                    }`}
                >
                  {style}
                </button>
              ))}
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
